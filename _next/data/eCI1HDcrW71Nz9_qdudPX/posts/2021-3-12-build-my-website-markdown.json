{"pageProps":{"post":{"title":"How To Build My Own Website (2) - Markdown","date":"2021-03-12T20:00:00+08:00","slug":"2021-3-12-build-my-website-markdown","categories":["Front-End"],"readTime":3,"content":"<h2 id=\"section-contents\">Contents</h2>\n<ol>\n<li><a href=\"/posts/2021-3-10-build-my-website-nextjs\" rel=\"noopener noreferrer\" target=\"_blank\">The choice of Next.js</a></li>\n<li>Parse and Display Markdown</li>\n<li><a href=\"/posts/2021-3-14-build-my-website-style\" rel=\"noopener noreferrer\" target=\"_blank\">Style my website</a></li>\n</ol>\n<p><br></p>\n<p>Parsing and displaying <strong>Markdown</strong> files are one of the most important things in building a personal website, because all my blogs are written in Markdown. This article illustrates several things that I did in processing Markdown files.</p>\n<h2 id=\"section-parse-yaml-front-matter\">Parse YAML Front Matter</h2>\n<p><strong><a href=\"https://github.com/jonschlinkert/gray-matter\" rel=\"noopener noreferrer\" target=\"_blank\"> gray-matter</a></strong> is a useful tool to parse <a href=\"https://yaml.org/\" rel=\"noopener noreferrer\" target=\"_blank\">YAML</a> front matter. As my old Blog Website is built by <a href=\"https://jekyllrb.com/\" rel=\"noopener noreferrer\" target=\"_blank\">Jekyll</a>, which supports parsing YAML by default, all my blog posts used YAML to carry meta information, like this:</p>\n<pre><code class=\"yaml language-yaml\">---\ntitle:  \"How To Build My Own Website (2) - Markdown\"\ndate:   \"2021-03-12T20:00:00+08:00\"\ncategories: Front-End\n---</code></pre>\n<p>with <strong>gray-matter</strong> parsing:</p>\n<pre><code class=\"javascript language-javascript\">import matter from 'gray-matter';\n\nconst { data, content } = matter(fs.readFileSync(filePath, 'utf8'));</code></pre>\n<p>the <code>data</code> object is the result of parsing front-matter, and the <code>content</code> is the post content with front-matter stripped.</p>\n<pre><code class=\"json language-json\">data: {\n  title: \"How To Build My Own Website (2) - Markdown\",\n  date: \"2021-03-12T20:00:00+08:00\",\n  categories: \"Front-End\",\n},    </code></pre>\n<p><a id=\"excerpt\"></a>The object returned by <strong>gray-matter</strong> also has a <code>excerpt</code> property, which can extract excerpt from Markdown files if excerpt is provided in a <a href=\"https://github.com/jonschlinkert/gray-matter#optionsexcerpts\" rel=\"noopener noreferrer\" target=\"_blank\">specified format</a>. However, my old posts didn't have excerpt, and it takes time to fill it again. So I decide to extract several lines of the first paragraph as the excerpt, see <a href=\"#section-extract-plain-text\">below</a> for details.</p>\n<h2 id=\"section-convert-markdown-to-html\">Convert Markdown To HTML</h2>\n<p>I chose <a href=\"https://github.com/showdownjs/showdown\" rel=\"noopener noreferrer\" target=\"_blank\">showdown</a> to help me convert <strong>Markdown</strong> content to <strong>HTML</strong>. The <a href=\"https://nextjs.org/learn/basics/dynamic-routes/render-markdown\" rel=\"noopener noreferrer\" target=\"_blank\">Next.js tutorial</a> uses <a href=\"https://github.com/remarkjs/remark\" rel=\"noopener noreferrer\" target=\"_blank\">remark</a> library, which is also cool. However, I prefer <strong>showdown</strong>, because：</p>\n<ol>\n<li><p>it has the most stars in Github.</p></li>\n<li><p>it has plenty of <a href=\"https://github.com/showdownjs/showdown#valid-options\" rel=\"noopener noreferrer\" target=\"_blank\">options</a> for me to tweak the result of HTML.</p></li>\n<li><p>it has <strong><a href=\"https://github.com/showdownjs/showdown#flavors\" rel=\"noopener noreferrer\" target=\"_blank\">Github Flavored Markdown</a></strong>. </p>\n<pre><code class=\"javascript language-javascript\"> showdown.setFlavor('github');</code></pre></li>\n<li><p>it enables defining <a href=\"https://github.com/showdownjs/showdown/wiki/extensions#creating-showdown-extensions\" rel=\"noopener noreferrer\" target=\"_blank\">extensions</a>, so I can manipulate the internal links among posts. The below extension enables <code>/posts/2021-3-10-build-my-website-nextjs</code> to jump to my previous post.</p>\n<pre><code class=\"javascript language-javascript\"> extensions: [\n  {\n    type: 'lang',\n    regex: /\\{\\%\\s*POST_URL\\s*\\%\\}/g,\n    replace: `${process.env.basePath}/posts`\n  },    \n ],</code></pre></li>\n</ol>\n<h2 id=\"section-github-flavored-style\">Github Flavored Style</h2>\n<p>I am used to <strong>Github Flavored Markdown</strong> style. However, I also use <a href=\"https://tailwindcss.com/\" rel=\"noopener noreferrer\" target=\"_blank\">tailwindcss</a> as the styling framework in my website. It has default styles which is not suitable for Markdown. So I use <a href=\"https://github.com/sindresorhus/github-markdown-css\" rel=\"noopener noreferrer\" target=\"_blank\">github-markdown-css</a> to override the default style, making it Github Flavored. The usage is simple. Import it where the Markdown content renders.</p>\n<pre><code class=\"javascript language-javascript\">import 'github-markdown-css/github-markdown.css';\n\nexport default function MarkdownContent({ content }) {\n    return (\n        &lt;div\n            className=\"markdown-body\"\n            dangerouslySetInnerHTML={{ __html: content }}\n        /&gt;\n    )\n}</code></pre>\n<p><em>There is a little tweak here. After I apply this .css, I found all the <code>list-style</code> are gone, like this:</em></p>\n<p><img src=\"/blog/assets/img-my-website/2.jpg\" alt=\"\"></p>\n<p><em>After debugging with the browser developer tools, I found that the <code>list-style</code> is given <code>none</code> by <strong>tailwindcss</strong>, and <a href=\"https://github.com/sindresorhus/github-markdown-css/blob/main/github-markdown.css\" rel=\"noopener noreferrer\" target=\"_blank\">github-markdown-css</a> doesn't override it.</em></p>\n<p><img src=\"/blog/assets/img-my-website/3.jpg\" alt=\"\"></p>\n<p><img src=\"/blog/assets/img-my-website/4.jpg\" alt=\"\"></p>\n<p><em>So I added a <a href=\"https://nextjs.org/docs/basic-features/built-in-css-support#adding-component-level-css\" rel=\"noopener noreferrer\" target=\"_blank\">Component-Level CSS</a> to override the tailwindcss.</em></p>\n<pre><code class=\"css language-css\">.markdown ol {\n  list-style: decimal; \n}\n.markdown ul {\n  list-style: disc;\n}</code></pre>\n<pre><code class=\"javascript language-javascript\">import 'github-markdown-css/github-markdown.css';\nimport markdownStyles from './markdown-styles.module.css';\n\nexport default function MarkdownContent({ content }) {\n    return (\n        &lt;div\n            className={`markdown-body ${markdownStyles.markdown}`}\n            dangerouslySetInnerHTML={{ __html: content }}\n        /&gt;\n    )\n}</code></pre>\n<h2 id=\"section-render-latexhttpswwwlatex-projectorg-math\">Render <a href=\"https://www.latex-project.org/\" rel=\"noopener noreferrer\" target=\"_blank\">LaTeX</a> Math</h2>\n<p><a href=\"https://github.com/showdownjs/showdown\" rel=\"noopener noreferrer\" target=\"_blank\">showdown</a> doesn't have a built-in <strong>LaTex</strong> parser. Fortunately there is an extension called <a href=\"https://github.com/obedm503/showdown-katex\" rel=\"noopener noreferrer\" target=\"_blank\">showdown-katex</a> that renders <a href=\"https://www.latex-project.org/\" rel=\"noopener noreferrer\" target=\"_blank\">LaTeX</a> math and <a href=\"http://asciimath.org/\" rel=\"noopener noreferrer\" target=\"_blank\">AsciiMath</a> using <a href=\"https://khan.github.io/KaTeX/\" rel=\"noopener noreferrer\" target=\"_blank\">KaTeX</a>. For usage, add it to the <code>extensions</code>'s array in the <code>showdown.Converter</code>'s construction function:</p>\n<pre><code class=\"javascript language-javascript\">import showdownKatex from 'showdown-katex';\n\nextensions: [\n  showdownKatex({\n    delimiters: [\n      { left: \"$\", right: \"$\" },\n    ],\n  }),   \n],</code></pre>\n<h2 id=\"section-extract-plain-text\">Extract Plain Text</h2>\n<p>As mentioned <a href=\"#excerpt\">above</a>, I need to extract several lines of the first paragraph as the excerpt. However, in spite of the plain text, Markdown contains syntax, which shouldn't be counted. So <strong>how to count the plain text in Markdown</strong>?</p>\n<p>Thanks to <strong><a href=\"https://github.com/syntax-tree/mdast\" rel=\"noopener noreferrer\" target=\"_blank\">mdast</a></strong>, which stands for <strong>M</strong>ark<strong>d</strong>own <strong>A</strong>bstract <strong>S</strong>yntax <strong>T</strong>ree, the Markdown content can be converted to a syntax tree. Then I can extract only text value by traversing all nodes in the tree. In my case, I only take into account those nodes with a <code>value</code> property. For example,</p>\n<pre><code class=\"javascript language-javascript\">//text\n{type: 'text', value: 'This is text'}\n\n//code\n{\n  type: 'code',\n  lang: 'javascript',\n  meta: 'highlight-line=\"2\"',\n  value: 'foo()\\nbar()\\nbaz()'\n}\n\n//inline code\n{type: 'inlineCode', value: 'foo()'}</code></pre>\n<p>Below are examples of nodes without a <code>value</code> property.</p>\n<pre><code class=\"javascript language-javascript\">//paragraph\n{\n  type: 'paragraph',\n  children: [{type: 'text', value: 'This is text'}]\n}\n\n//emphasis\n{\n  type: 'emphasis',\n  children: [{type: 'text', value: 'alpha'}]\n},\n\n//list\n{\n  type: 'list',\n  ordered: true,\n  start: 1,\n  spread: false,\n  children: [{\n    type: 'listItem',\n    spread: false,\n    children: [{\n      type: 'paragraph',\n      children: [{type: 'text', value: 'foo'}]\n    }]\n  }]\n}</code></pre>\n<p><em>For details of every node, please check its doc.</em></p>\n<p>To parse Markdown content into <strong>mdast</strong>, I use <a href=\"https://github.com/remarkjs/remark/tree/main/packages/remark-parse\" rel=\"noopener noreferrer\" target=\"_blank\">remark-parse</a>, a parser for <a href=\"https://github.com/unifiedjs/unified\" rel=\"noopener noreferrer\" target=\"_blank\">unified</a>.</p>\n<pre><code class=\"javascript language-javascript\">import unified from 'unified';\nimport markdownParse from 'remark-parse';\n\nconst tree = unified().use(markdownParse).parse(content);</code></pre>\n<hr>\n<p>Ok, these are the main things that I did with Markdown.</p>\n<p>Again, many thanks to those cool guys who contributed to the Markdown work👍☕️</p>"},"postNav":{"previous":"/posts/2021-3-10-build-my-website-nextjs","next":"/posts/2021-3-14-build-my-website-style"},"morePosts":[{"slug":"2021-3-14-build-my-website-style","title":"How To Build My Own Website (3) - Style","date":"2021-03-14T20:00:00+08:00","locale":"en","excerpt":"This article illustrates how I style my own website using Tailwindcss framework, make theme color configurable, and apply interactive animations.","readTime":2},{"slug":"2021-3-10-build-my-website-nextjs","title":"How To Build My Own Website (1) - Next.js","date":"2021-03-10T20:00:00+08:00","locale":"en","readTime":4,"excerpt":"<p>I had always dreamed of building my own website, to express myself, to keep memory of what I have done,...</p>"},{"slug":"2021-2-19-mock-requestanimationframe-in-jest","title":"Mock requestAnimationFrame in Jest","date":"2021-02-19T10:00:00+08:00","locale":"en","readTime":1,"excerpt":"<p>When I wrote test for my tiny rhythm game, I realized that all the browser based actions needed to be...</p>"},{"slug":"2021-1-7-rythm-game","title":"Create A Classical Rythm Game With React Hooks and Tone.js","date":"2021-01-07T21:00:00+08:00","locale":"en","ogImage":"/blog/assets/img-rythm-game/1.jpg","readTime":5,"excerpt":"<p>Recently I've been obsessed with React Hooks, and then I came up with an idea to create a classical rythm...</p>"}]},"__N_SSG":true}