{"pageProps":{"post":{"title":"Google Blockly Reimplementation with Unity/C#(2)","date":"2017-10-14T12:00:00+08:00","slug":"2017-10-14-blockly-two","ogImage":"/blog/assets/img-blockly/Demo.png","categories":["Unity"],"readTime":4,"content":"<h2 id=\"section-contents\">Contents</h2>\n<ol>\n<li><a href=\"/posts/2017-10-11-blockly-one\" rel=\"noopener noreferrer\" target=\"_blank\">Introduction</a></li>\n<li>Blockly Model</li>\n<li><a href=\"/posts/2017-10-22-blockly-three\" rel=\"noopener noreferrer\" target=\"_blank\">Code Generator, Interpreter and Runner</a></li>\n<li><a href=\"/posts/2017-10-31-blockly-four\" rel=\"noopener noreferrer\" target=\"_blank\">UGUI Design</a></li>\n</ol>\n<p><br></p>\n<h2 id=\"section-google-blockly-model\">Google Blockly Model</h2>\n<p>核心Model模块完全参考Google Blockly。正如<a href=\"/posts/2017-10-11-blockly-one#section-框架设计\" rel=\"noopener noreferrer\" target=\"_blank\">前文框架图</a>所示，Blockly主要包括模型：<code>Workspace</code>,<code>Variable</code>, <code>Block</code>, <code>Connection</code>, <code>Input</code>, <code>Field</code>。</p>\n<ul>\n<li><p>Workspace相当于一个容器，包含Blocks, Variables。</p>\n<ul>\n<li>一个Workspace可以存储为一个<a id=\"workspace_xml\">Xml</a>文件，保留Blocks之间的连接关系，以及属性信息。反过来也可以从一个格式正确的Xml文件重建一个Workspace。</li>\n<li>Code Generator&amp;Interpreter从遍历一个Workspace的顶层Block开始，根据Blocks之间的连接关系依次深度优先向下执行。</li>\n<li>一个Workspace在UI上显示为可供编辑Block的区域，其中还包含一个Toolbox，提供Block原型的容器。</li></ul></li>\n<li><p>Variable是作用在一个Workspace中的全局变量。</p></li>\n<li><p><a id=\"block\">Block</a>代表一段可执行程序。</p>\n<ul>\n<li>类比于一个方法，可以有输出（作为另一个Block的输入使用），也可以是没有输出（作为一个命令接在另一个Block下面执行）。</li>\n<li>Blocks之间的关系有两种：输入/输出，前/后。Blocks在一个Workspace中的结构如下：</li></ul>\n<pre><code>hierarchy of blocks:\n\n- Block(Topmost in workspace)\n  - ConnectionOutput\n  - ConnectionPrev\n  - ConnectionNext\n    - Block(Next)\n  - Input\n    - Field \n    - Field \n      ...\n    - ConnectionInput\n      - Block(Input)\n  - Input\n    ...\n- Block\n  ...\n- Block\n  ...</code></pre></li>\n<li><p>Connection是实现Blocks之间的连接的关键，方式如下： </p></li>\n</ul>\n<pre><code>  Block.ConnectionOutput -&gt; Block.Input.ConnectionInput\n  Block.ConnectionPrev &lt;-&gt; Block.ConnectionNext</code></pre>\n<ul>\n<li><p>Input是Block的基本单元。</p>\n<ul>\n<li><p>一个Input包含若干Field，以及一个Connection用来连接输入Block。</p></li>\n<li><p>依照json定义Block的描述，按顺序创建Input。</p></li></ul>\n<p><a id=\"json_message\">一个例子：</a></p>\n<pre><code>\"message0\": \"%1 %2 %{BKY_LISTS_SPLIT_WITH_DELIMITER} %3\"</code></pre>\n<ul>\n<li><code>%1</code>: field_dropdown</li>\n<li><code>%2</code>: input_value</li>\n<li><code>%{BKY_LISTS_SPLIT_WITH_DELIMITER}</code>: 多语言的key</li>\n<li><code>%3</code>: input_value</li></ul>\n<p>因此该Block有两个Input:</p>\n<ol>\n<li>包括field_dropdown，Input Connection；</li>\n<li>包括field_label（文字用label实现），Input Connection；</li></ol></li>\n<li><p>Field描述Block的属性、状态，拿上例解释：</p>\n<ul>\n<li>field_dropdown：提供menu选择，不同选项代表了该Block执行不同的功能，比如算术运算的<code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>。</li>\n<li>field_label: 提供文字表达，用来补充描述该Block的功能。</li></ul>\n<p>除此之外，还有<code>field_variable</code>, <code>field_number</code>, <code>field_textinput</code>等，开发者也可自己定义。</p></li>\n</ul>\n<h3 id=\"section-json语义定义\">Json语义定义</h3>\n<p>一个Block是由json语义来定义的，主要有如下属性：</p>\n<ul>\n<li>type，用来识别Block的类型标识符；</li>\n<li>Input/Field，如<a href=\"#json_message\">上例</a>，以及对每个field, input属性、输入类型的描述；</li>\n<li>Block Output Connection，或者Previous/Next Connection；</li>\n<li>UI背景色；</li>\n<li><a id=\"json-special-define\">特殊属性</a>；</li>\n</ul>\n<p>开发者可通过自定义Json描述，来定义一个新的Block。</p>\n<h3 id=\"section-mutation特性\">Mutation特性</h3>\n<p>上文Json定义中提到了<a href=\"#json-special-define\">特殊属性</a>，其中Mutation就是一个，它提供了动态修改Block结构的功能。</p>\n<p>IF/ELSE就是一个典型的需要Mutation的例子：</p>\n<p>​    <img src=\"/blog/assets/img-blockly/Mutator_IfElse_1.png\" alt=\"初始结构\"> =&gt; <img src=\"/blog/assets/img-blockly/Mutator_IfElse_2.png\" alt=\"Mutate后结构\"></p>\n<p>用户在编辑时，只需要指定<code>else if</code>的个数，以及是否有<code>else</code>，Mutation根据这些变量重构Block结构。</p>\n<h4 id=\"section-函数\">函数</h4>\n<p><strong>Mutation</strong>特性给<strong>函数Block</strong>的实现提供了便利。</p>\n<p>下图定义了一个Swap(x, y)的函数，调用结果为将传入的x, y的值互换。</p>\n<p><img src=\"/blog/assets/img-blockly/Procedure_1.png\" alt=\"函数实现\"></p>\n<p>函数Block（Google Blockly称“Procedure”）分为两大类：</p>\n<ul>\n<li>函数声明<em>Procedure Definition</em>: 利用Mutation功能可以允许用户定义函数名、参数，供所在的Workspace全局调用。见上图右。</li>\n<li>函数调用<em>Procedure Call</em>: 对应每个声明的函数，都会自动定义一个函数调用Block供用户选择。Block中只包含函数名、参数Input，见上图左；</li>\n</ul>\n<h4 id=\"section-自定义mutation\">自定义Mutation</h4>\n<p>开发者可以定义更多的Mutation，而具体Mutation的功能需自己实现。</p>\n<p>以上简单介绍了Blockly的模型结构，下一篇博文会介绍Code Generator, Interpreter 以及 Runner的实现方法。</p>"},"postNav":{"previous":"/posts/2017-10-11-blockly-one","next":"/posts/2017-10-19-travelling-nz"},"morePosts":[{"slug":"2018-6-10-chain-animation-on-wheels","title":"Automatic Chain's Animation On wheel Models","date":"2018-06-10T16:00:00+08:00","locale":"en","readTime":3,"excerpt":"<p>In last blog, I introduced the construction of the chains on wheels. This blog will tell the animation calculations. The...</p>"},{"slug":"2018-6-7-auto-draw-chain-on-wheels","title":"Automatic Chain's Construction On wheel Models","date":"2018-06-07T16:00:00+08:00","locale":"en","ogImage":"/blog/assets/img-auto-draw-chain/3.jpg","readTime":2,"excerpt":"<p>Rencently I did have fun with a project which I'd like to share. It is to construct a chain automatically...</p>"},{"slug":"2018-3-31-thread-in-unity","title":"Use Thread In Unity","date":"2018-03-31T13:00:00+08:00","locale":"en","readTime":2,"excerpt":"<p>It's been a long time since my last blog, as I've recently spent plenty of time to save a dying...</p>"},{"slug":"2018-1-20-orthographic-camera-computing","title":"Restrict Object In Specified Screen Area Using Orthographic Camera","date":"2018-01-20T15:00:00+08:00","locale":"en","ogImage":"/blog/assets/img-orthographic-camera/1.JPG","readTime":3,"excerpt":"<p>I’ve encountered a problem to adjust the position of orthographic camera for restricting 3D objects in the specified rectangle area...</p>"}]},"__N_SSG":true}